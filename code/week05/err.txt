
src/Week05/Homework2.hs:27:1: warning: [-Wunused-imports]
    The import of ‘undefined’ from module ‘Prelude’ is redundant
   |
27 | import           Prelude                (IO, Semigroup (..), Show (..), String, undefined)
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
GHC Core to PLC plugin: E042:Error: Unsupported feature: Type constructor: GHC.Prim.Char#
Context: Compiling type: GHC.Prim.Char#
Context: Compiling data constructor type: GHC.Types.C#
Context: Compiling type: GHC.Types.Char
Context: Compiling type: GHC.Base.String
Context: Compiling type: GHC.Base.String
                         -> Data.ByteString.Internal.ByteString
Context: Compiling definition of: Plutus.V1.Ledger.Value.$fIsStringTokenName1
Context: Compiling expr: Plutus.V1.Ledger.Value.$fIsStringTokenName1
Context: Compiling expr: Plutus.V1.Ledger.Value.$fIsStringTokenName1
                           ((GHC.Types.[] @ GHC.Types.Char)
                            `cast` (Sym (Nth:2
                                             (((<GHC.Base.String>_R
                                                ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                    :: GHC.Types.Coercible GHC.Base.String GHC.Base.String))
Context: Compiling expr: let {
                           y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                    WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                           y_su6g
                             = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                 ((GHC.Types.[] @ GHC.Types.Char)
                                  `cast` (Sym (Nth:2
                                                   (((<GHC.Base.String>_R
                                                      ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                          :: GHC.Types.Coercible GHC.Base.String GHC.Base.String)) } in
                         case PlutusTx.Builtins.Internal.ifThenElse
                                @ GHC.Types.Bool
                                (PlutusTx.Builtins.Internal.equalsByteString
                                   (tn
                                    `cast` (Nth:2
                                                (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                 ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                 ->_R <GHC.Types.Bool>_R)
                                            :: GHC.Types.Coercible
                                                 Plutus.V1.Ledger.Value.TokenName
                                                 PlutusTx.Builtins.Internal.BuiltinByteString))
                                   (y_su6g
                                    `cast` (Nth:3
                                                (<GHC.Base.String>_R
                                                 ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                   (Nth:3
                                                                                                                                                                        (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                         ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                         ->_R <GHC.Types.Bool>_R))
                                            :: GHC.Types.Coercible
                                                 Data.ByteString.Internal.ByteString
                                                 PlutusTx.Builtins.Internal.BuiltinByteString)))
                                GHC.Types.True
                                GHC.Types.False
                         of {
                           GHC.Types.False -> GHC.Types.False;
                           GHC.Types.True ->
                             PlutusTx.Builtins.Internal.ifThenElse
                               @ GHC.Types.Bool
                               (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                               GHC.Types.True
                               GHC.Types.False
                         }
Context: Creating alternative: []
Context: Compiling expr: case ds_dqIR of {
                           [] ->
                             let {
                               y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                               [LclId,
                                Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                        WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                               y_su6g
                                 = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                     ((GHC.Types.[] @ GHC.Types.Char)
                                      `cast` (Sym (Nth:2
                                                       (((<GHC.Base.String>_R
                                                          ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                              :: GHC.Types.Coercible GHC.Base.String GHC.Base.String)) } in
                             case PlutusTx.Builtins.Internal.ifThenElse
                                    @ GHC.Types.Bool
                                    (PlutusTx.Builtins.Internal.equalsByteString
                                       (tn
                                        `cast` (Nth:2
                                                    (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                     ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                     ->_R <GHC.Types.Bool>_R)
                                                :: GHC.Types.Coercible
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                       (y_su6g
                                        `cast` (Nth:3
                                                    (<GHC.Base.String>_R
                                                     ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                       (Nth:3
                                                                                                                                                                            (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                             ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                             ->_R <GHC.Types.Bool>_R))
                                                :: GHC.Types.Coercible
                                                     Data.ByteString.Internal.ByteString
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)))
                                    GHC.Types.True
                                    GHC.Types.False
                             of {
                               GHC.Types.False -> GHC.Types.False;
                               GHC.Types.True ->
                                 PlutusTx.Builtins.Internal.ifThenElse
                                   @ GHC.Types.Bool
                                   (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                   GHC.Types.True
                                   GHC.Types.False
                             };
                           : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                         }
Context: Creating alternative: (,,)
Context: Compiling expr: case ds_dqIQ of
                         { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                         case ds_dqIR of {
                           [] ->
                             let {
                               y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                               [LclId,
                                Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                        WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                               y_su6g
                                 = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                     ((GHC.Types.[] @ GHC.Types.Char)
                                      `cast` (Sym (Nth:2
                                                       (((<GHC.Base.String>_R
                                                          ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                              :: GHC.Types.Coercible GHC.Base.String GHC.Base.String)) } in
                             case PlutusTx.Builtins.Internal.ifThenElse
                                    @ GHC.Types.Bool
                                    (PlutusTx.Builtins.Internal.equalsByteString
                                       (tn
                                        `cast` (Nth:2
                                                    (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                     ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                     ->_R <GHC.Types.Bool>_R)
                                                :: GHC.Types.Coercible
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     PlutusTx.Builtins.Internal.BuiltinByteString))
                                       (y_su6g
                                        `cast` (Nth:3
                                                    (<GHC.Base.String>_R
                                                     ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                       (Nth:3
                                                                                                                                                                            (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                             ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                             ->_R <GHC.Types.Bool>_R))
                                                :: GHC.Types.Coercible
                                                     Data.ByteString.Internal.ByteString
                                                     PlutusTx.Builtins.Internal.BuiltinByteString)))
                                    GHC.Types.True
                                    GHC.Types.False
                             of {
                               GHC.Types.False -> GHC.Types.False;
                               GHC.Types.True ->
                                 PlutusTx.Builtins.Internal.ifThenElse
                                   @ GHC.Types.Bool
                                   (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                   GHC.Types.True
                                   GHC.Types.False
                             };
                           : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                         }
                         }
Context: Creating alternative: :
Context: Compiling expr: case Plutus.V1.Ledger.Value.flattenValue
                                (case info of
                                 { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                    _ [Occ=Dead] ds4 [Occ=Once] _ [Occ=Dead]
                                                                    _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                                                                    _ [Occ=Dead] _ [Occ=Dead] ->
                                 ds4
                                 })
                         of {
                           [] -> GHC.Types.False;
                           : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                             case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                             case ds_dqIR of {
                               [] ->
                                 let {
                                   y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                   [LclId,
                                    Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                            WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                                   y_su6g
                                     = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                         ((GHC.Types.[] @ GHC.Types.Char)
                                          `cast` (Sym (Nth:2
                                                           (((<GHC.Base.String>_R
                                                              ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                  :: GHC.Types.Coercible
                                                       GHC.Base.String GHC.Base.String)) } in
                                 case PlutusTx.Builtins.Internal.ifThenElse
                                        @ GHC.Types.Bool
                                        (PlutusTx.Builtins.Internal.equalsByteString
                                           (tn
                                            `cast` (Nth:2
                                                        (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                         ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                         ->_R <GHC.Types.Bool>_R)
                                                    :: GHC.Types.Coercible
                                                         Plutus.V1.Ledger.Value.TokenName
                                                         PlutusTx.Builtins.Internal.BuiltinByteString))
                                           (y_su6g
                                            `cast` (Nth:3
                                                        (<GHC.Base.String>_R
                                                         ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                           (Nth:3
                                                                                                                                                                                (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                 ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                 ->_R <GHC.Types.Bool>_R))
                                                    :: GHC.Types.Coercible
                                                         Data.ByteString.Internal.ByteString
                                                         PlutusTx.Builtins.Internal.BuiltinByteString)))
                                        GHC.Types.True
                                        GHC.Types.False
                                 of {
                                   GHC.Types.False -> GHC.Types.False;
                                   GHC.Types.True ->
                                     PlutusTx.Builtins.Internal.ifThenElse
                                       @ GHC.Types.Bool
                                       (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                       GHC.Types.True
                                       GHC.Types.False
                                 };
                               : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                             }
                             }
                         }
Context: Compiling expr: case case Plutus.V1.Ledger.Value.flattenValue
                                     (case info of
                                      { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                         _ [Occ=Dead] ds4 [Occ=Once]
                                                                         _ [Occ=Dead] _ [Occ=Dead]
                                                                         _ [Occ=Dead] _ [Occ=Dead]
                                                                         _ [Occ=Dead] _ [Occ=Dead] ->
                                      ds4
                                      })
                              of {
                                [] -> GHC.Types.False;
                                : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                  case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                  case ds_dqIR of {
                                    [] ->
                                      let {
                                        y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                        [LclId,
                                         Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                                 WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
                                        y_su6g
                                          = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                              ((GHC.Types.[] @ GHC.Types.Char)
                                               `cast` (Sym (Nth:2
                                                                (((<GHC.Base.String>_R
                                                                   ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                       :: GHC.Types.Coercible
                                                            GHC.Base.String GHC.Base.String)) } in
                                      case PlutusTx.Builtins.Internal.ifThenElse
                                             @ GHC.Types.Bool
                                             (PlutusTx.Builtins.Internal.equalsByteString
                                                (tn
                                                 `cast` (Nth:2
                                                             (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                              ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                              ->_R <GHC.Types.Bool>_R)
                                                         :: GHC.Types.Coercible
                                                              Plutus.V1.Ledger.Value.TokenName
                                                              PlutusTx.Builtins.Internal.BuiltinByteString))
                                                (y_su6g
                                                 `cast` (Nth:3
                                                             (<GHC.Base.String>_R
                                                              ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                (Nth:3
                                                                                                                                                                                     (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                      ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                      ->_R <GHC.Types.Bool>_R))
                                                         :: GHC.Types.Coercible
                                                              Data.ByteString.Internal.ByteString
                                                              PlutusTx.Builtins.Internal.BuiltinByteString)))
                                             GHC.Types.True
                                             GHC.Types.False
                                      of {
                                        GHC.Types.False -> GHC.Types.False;
                                        GHC.Types.True ->
                                          PlutusTx.Builtins.Internal.ifThenElse
                                            @ GHC.Types.Bool
                                            (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                            GHC.Types.True
                                            GHC.Types.False
                                      };
                                    : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                  }
                                  }
                              }
                         of {
                           GHC.Types.False ->
                             PlutusTx.Builtins.Internal.trace
                               @ GHC.Types.Bool
                               (GHC.Magic.noinline
                                  @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                  PlutusTx.Builtins.Class.stringToBuiltinString
                                  (GHC.CString.unpackCString# "wrong amount minted"#))
                               GHC.Types.False;
                           GHC.Types.True -> GHC.Types.True
                         }
Context: Creating alternative: GHC.Types.True
Context: Compiling expr: case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      $dMonoid3
                                      ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                          Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                            (case i of
                                             { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                  _ [Occ=Dead] ->
                                             ds1
                                             })
                                            oref)
                                       `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R)
                                               :: GHC.Types.Coercible
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo
                                                     -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                      (case info of
                                       { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                       ds1
                                       }))
                                   `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                           :: GHC.Types.Coercible
                                                (Data.Semigroup.Internal.Sum GHC.Types.Bool) GHC.Types.Bool)
                              of {
                                GHC.Types.False ->
                                  PlutusTx.Builtins.Internal.trace
                                    @ GHC.Types.Bool
                                    (GHC.Magic.noinline
                                       @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                       PlutusTx.Builtins.Class.stringToBuiltinString
                                       (GHC.CString.unpackCString# "UTxO not consumed"#))
                                    GHC.Types.False;
                                GHC.Types.True -> GHC.Types.True
                              }
                         of {
                           GHC.Types.False -> GHC.Types.False;
                           GHC.Types.True ->
                             case case Plutus.V1.Ledger.Value.flattenValue
                                         (case info of
                                          { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] ds4 [Occ=Once]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                                          ds4
                                          })
                                  of {
                                    [] -> GHC.Types.False;
                                    : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                      case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                      case ds_dqIR of {
                                        [] ->
                                          let {
                                            y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                            [LclId,
                                             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                                     WorkFree=False, Expandable=False,
                                                     Guidance=IF_ARGS [] 20 0}]
                                            y_su6g
                                              = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                  ((GHC.Types.[] @ GHC.Types.Char)
                                                   `cast` (Sym (Nth:2
                                                                    (((<GHC.Base.String>_R
                                                                       ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                           :: GHC.Types.Coercible
                                                                GHC.Base.String GHC.Base.String)) } in
                                          case PlutusTx.Builtins.Internal.ifThenElse
                                                 @ GHC.Types.Bool
                                                 (PlutusTx.Builtins.Internal.equalsByteString
                                                    (tn
                                                     `cast` (Nth:2
                                                                 (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R <GHC.Types.Bool>_R)
                                                             :: GHC.Types.Coercible
                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    (y_su6g
                                                     `cast` (Nth:3
                                                                 (<GHC.Base.String>_R
                                                                  ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                    (Nth:3
                                                                                                                                                                                         (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R <GHC.Types.Bool>_R))
                                                             :: GHC.Types.Coercible
                                                                  Data.ByteString.Internal.ByteString
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                 GHC.Types.True
                                                 GHC.Types.False
                                          of {
                                            GHC.Types.False -> GHC.Types.False;
                                            GHC.Types.True ->
                                              PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                GHC.Types.True
                                                GHC.Types.False
                                          };
                                        : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                      }
                                      }
                                  }
                             of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @ GHC.Types.Bool
                                   (GHC.Magic.noinline
                                      @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                      PlutusTx.Builtins.Class.stringToBuiltinString
                                      (GHC.CString.unpackCString# "wrong amount minted"#))
                                   GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                         }
Context: Compiling expr: let {
                           $dMonoid3 [Occ=Once]
                             :: PlutusTx.Monoid.Monoid
                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                    WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                           $dMonoid3
                             = PlutusTx.Numeric.$fMonoidSum
                                 @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                         case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      $dMonoid3
                                      ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                          Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                            (case i of
                                             { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                  _ [Occ=Dead] ->
                                             ds1
                                             })
                                            oref)
                                       `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R)
                                               :: GHC.Types.Coercible
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo
                                                     -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                      (case info of
                                       { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                       ds1
                                       }))
                                   `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                           :: GHC.Types.Coercible
                                                (Data.Semigroup.Internal.Sum GHC.Types.Bool) GHC.Types.Bool)
                              of {
                                GHC.Types.False ->
                                  PlutusTx.Builtins.Internal.trace
                                    @ GHC.Types.Bool
                                    (GHC.Magic.noinline
                                       @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                       PlutusTx.Builtins.Class.stringToBuiltinString
                                       (GHC.CString.unpackCString# "UTxO not consumed"#))
                                    GHC.Types.False;
                                GHC.Types.True -> GHC.Types.True
                              }
                         of {
                           GHC.Types.False -> GHC.Types.False;
                           GHC.Types.True ->
                             case case Plutus.V1.Ledger.Value.flattenValue
                                         (case info of
                                          { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] ds4 [Occ=Once]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                                          ds4
                                          })
                                  of {
                                    [] -> GHC.Types.False;
                                    : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                      case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                      case ds_dqIR of {
                                        [] ->
                                          let {
                                            y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                            [LclId,
                                             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                                     WorkFree=False, Expandable=False,
                                                     Guidance=IF_ARGS [] 20 0}]
                                            y_su6g
                                              = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                  ((GHC.Types.[] @ GHC.Types.Char)
                                                   `cast` (Sym (Nth:2
                                                                    (((<GHC.Base.String>_R
                                                                       ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                           :: GHC.Types.Coercible
                                                                GHC.Base.String GHC.Base.String)) } in
                                          case PlutusTx.Builtins.Internal.ifThenElse
                                                 @ GHC.Types.Bool
                                                 (PlutusTx.Builtins.Internal.equalsByteString
                                                    (tn
                                                     `cast` (Nth:2
                                                                 (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R <GHC.Types.Bool>_R)
                                                             :: GHC.Types.Coercible
                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    (y_su6g
                                                     `cast` (Nth:3
                                                                 (<GHC.Base.String>_R
                                                                  ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                    (Nth:3
                                                                                                                                                                                         (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R <GHC.Types.Bool>_R))
                                                             :: GHC.Types.Coercible
                                                                  Data.ByteString.Internal.ByteString
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                 GHC.Types.True
                                                 GHC.Types.False
                                          of {
                                            GHC.Types.False -> GHC.Types.False;
                                            GHC.Types.True ->
                                              PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                GHC.Types.True
                                                GHC.Types.False
                                          };
                                        : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                      }
                                      }
                                  }
                             of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @ GHC.Types.Bool
                                   (GHC.Magic.noinline
                                      @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                      PlutusTx.Builtins.Class.stringToBuiltinString
                                      (GHC.CString.unpackCString# "wrong amount minted"#))
                                   GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                         }
Context: Compiling expr: let {
                           info :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                    WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                           info
                             = case ctx of
                               { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                         _ [Occ=Dead] ->
                               ds1
                               } } in
                         let {
                           $dMonoid3 [Occ=Once]
                             :: PlutusTx.Monoid.Monoid
                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                    WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                           $dMonoid3
                             = PlutusTx.Numeric.$fMonoidSum
                                 @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                         case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      $dMonoid3
                                      ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                          Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                            (case i of
                                             { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                  _ [Occ=Dead] ->
                                             ds1
                                             })
                                            oref)
                                       `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R)
                                               :: GHC.Types.Coercible
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo
                                                     -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                      (case info of
                                       { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                       ds1
                                       }))
                                   `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                           :: GHC.Types.Coercible
                                                (Data.Semigroup.Internal.Sum GHC.Types.Bool) GHC.Types.Bool)
                              of {
                                GHC.Types.False ->
                                  PlutusTx.Builtins.Internal.trace
                                    @ GHC.Types.Bool
                                    (GHC.Magic.noinline
                                       @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                       PlutusTx.Builtins.Class.stringToBuiltinString
                                       (GHC.CString.unpackCString# "UTxO not consumed"#))
                                    GHC.Types.False;
                                GHC.Types.True -> GHC.Types.True
                              }
                         of {
                           GHC.Types.False -> GHC.Types.False;
                           GHC.Types.True ->
                             case case Plutus.V1.Ledger.Value.flattenValue
                                         (case info of
                                          { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] ds4 [Occ=Once]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                                          ds4
                                          })
                                  of {
                                    [] -> GHC.Types.False;
                                    : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                      case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                      case ds_dqIR of {
                                        [] ->
                                          let {
                                            y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                            [LclId,
                                             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                                     WorkFree=False, Expandable=False,
                                                     Guidance=IF_ARGS [] 20 0}]
                                            y_su6g
                                              = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                  ((GHC.Types.[] @ GHC.Types.Char)
                                                   `cast` (Sym (Nth:2
                                                                    (((<GHC.Base.String>_R
                                                                       ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                           :: GHC.Types.Coercible
                                                                GHC.Base.String GHC.Base.String)) } in
                                          case PlutusTx.Builtins.Internal.ifThenElse
                                                 @ GHC.Types.Bool
                                                 (PlutusTx.Builtins.Internal.equalsByteString
                                                    (tn
                                                     `cast` (Nth:2
                                                                 (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R <GHC.Types.Bool>_R)
                                                             :: GHC.Types.Coercible
                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    (y_su6g
                                                     `cast` (Nth:3
                                                                 (<GHC.Base.String>_R
                                                                  ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                    (Nth:3
                                                                                                                                                                                         (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R <GHC.Types.Bool>_R))
                                                             :: GHC.Types.Coercible
                                                                  Data.ByteString.Internal.ByteString
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                 GHC.Types.True
                                                 GHC.Types.False
                                          of {
                                            GHC.Types.False -> GHC.Types.False;
                                            GHC.Types.True ->
                                              PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                GHC.Types.True
                                                GHC.Types.False
                                          };
                                        : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                      }
                                      }
                                  }
                             of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @ GHC.Types.Bool
                                   (GHC.Magic.noinline
                                      @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                      PlutusTx.Builtins.Class.stringToBuiltinString
                                      (GHC.CString.unpackCString# "wrong amount minted"#))
                                   GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                         }
Context: Creating alternative: ()
Context: Compiling expr: case ds_dqrR of { () ->
                         let {
                           info :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                    WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                           info
                             = case ctx of
                               { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                         _ [Occ=Dead] ->
                               ds1
                               } } in
                         let {
                           $dMonoid3 [Occ=Once]
                             :: PlutusTx.Monoid.Monoid
                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                           [LclId,
                            Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                    WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                           $dMonoid3
                             = PlutusTx.Numeric.$fMonoidSum
                                 @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                         case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                      @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      $dMonoid3
                                      ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                          Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                            (case i of
                                             { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                  _ [Occ=Dead] ->
                                             ds1
                                             })
                                            oref)
                                       `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                               ->_R Sym (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R)
                                               :: GHC.Types.Coercible
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                    (Plutus.V1.Ledger.Contexts.TxInInfo
                                                     -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                      (case info of
                                       { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead]
                                                                          _ [Occ=Dead] _ [Occ=Dead] ->
                                       ds1
                                       }))
                                   `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                           :: GHC.Types.Coercible
                                                (Data.Semigroup.Internal.Sum GHC.Types.Bool) GHC.Types.Bool)
                              of {
                                GHC.Types.False ->
                                  PlutusTx.Builtins.Internal.trace
                                    @ GHC.Types.Bool
                                    (GHC.Magic.noinline
                                       @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                       PlutusTx.Builtins.Class.stringToBuiltinString
                                       (GHC.CString.unpackCString# "UTxO not consumed"#))
                                    GHC.Types.False;
                                GHC.Types.True -> GHC.Types.True
                              }
                         of {
                           GHC.Types.False -> GHC.Types.False;
                           GHC.Types.True ->
                             case case Plutus.V1.Ledger.Value.flattenValue
                                         (case info of
                                          { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] ds4 [Occ=Once]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead]
                                                                             _ [Occ=Dead] _ [Occ=Dead] ->
                                          ds4
                                          })
                                  of {
                                    [] -> GHC.Types.False;
                                    : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                      case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                      case ds_dqIR of {
                                        [] ->
                                          let {
                                            y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                            [LclId,
                                             Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                                     WorkFree=False, Expandable=False,
                                                     Guidance=IF_ARGS [] 20 0}]
                                            y_su6g
                                              = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                  ((GHC.Types.[] @ GHC.Types.Char)
                                                   `cast` (Sym (Nth:2
                                                                    (((<GHC.Base.String>_R
                                                                       ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                           :: GHC.Types.Coercible
                                                                GHC.Base.String GHC.Base.String)) } in
                                          case PlutusTx.Builtins.Internal.ifThenElse
                                                 @ GHC.Types.Bool
                                                 (PlutusTx.Builtins.Internal.equalsByteString
                                                    (tn
                                                     `cast` (Nth:2
                                                                 (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                  ->_R <GHC.Types.Bool>_R)
                                                             :: GHC.Types.Coercible
                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString))
                                                    (y_su6g
                                                     `cast` (Nth:3
                                                                 (<GHC.Base.String>_R
                                                                  ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                    (Nth:3
                                                                                                                                                                                         (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                          ->_R <GHC.Types.Bool>_R))
                                                             :: GHC.Types.Coercible
                                                                  Data.ByteString.Internal.ByteString
                                                                  PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                 GHC.Types.True
                                                 GHC.Types.False
                                          of {
                                            GHC.Types.False -> GHC.Types.False;
                                            GHC.Types.True ->
                                              PlutusTx.Builtins.Internal.ifThenElse
                                                @ GHC.Types.Bool
                                                (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                GHC.Types.True
                                                GHC.Types.False
                                          };
                                        : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                      }
                                      }
                                  }
                             of {
                               GHC.Types.False ->
                                 PlutusTx.Builtins.Internal.trace
                                   @ GHC.Types.Bool
                                   (GHC.Magic.noinline
                                      @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                      PlutusTx.Builtins.Class.stringToBuiltinString
                                      (GHC.CString.unpackCString# "wrong amount minted"#))
                                   GHC.Types.False;
                               GHC.Types.True -> GHC.Types.True
                             }
                         }
                         }
Context: Compiling expr: \ (ctx [Occ=Once!]
                              :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                           case ds_dqrR of { () ->
                           let {
                             info :: Plutus.V1.Ledger.Contexts.TxInfo
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             info
                               = case ctx of
                                 { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                           _ [Occ=Dead] ->
                                 ds1
                                 } } in
                           let {
                             $dMonoid3 [Occ=Once]
                               :: PlutusTx.Monoid.Monoid
                                    (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                      WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                             $dMonoid3
                               = PlutusTx.Numeric.$fMonoidSum
                                   @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                           case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                        @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                        @ Plutus.V1.Ledger.Contexts.TxInInfo
                                        $dMonoid3
                                        ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                            Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                              (case i of
                                               { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                               ds1
                                               })
                                              oref)
                                         `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0]
                                                               <GHC.Types.Bool>_R)
                                                 :: GHC.Types.Coercible
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo
                                                       -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                        (case info of
                                         { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead] ->
                                         ds1
                                         }))
                                     `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                             :: GHC.Types.Coercible
                                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                                  GHC.Types.Bool)
                                of {
                                  GHC.Types.False ->
                                    PlutusTx.Builtins.Internal.trace
                                      @ GHC.Types.Bool
                                      (GHC.Magic.noinline
                                         @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                         PlutusTx.Builtins.Class.stringToBuiltinString
                                         (GHC.CString.unpackCString# "UTxO not consumed"#))
                                      GHC.Types.False;
                                  GHC.Types.True -> GHC.Types.True
                                }
                           of {
                             GHC.Types.False -> GHC.Types.False;
                             GHC.Types.True ->
                               case case Plutus.V1.Ledger.Value.flattenValue
                                           (case info of
                                            { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] ds4 [Occ=Once]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead] ->
                                            ds4
                                            })
                                    of {
                                      [] -> GHC.Types.False;
                                      : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                        case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                        case ds_dqIR of {
                                          [] ->
                                            let {
                                              y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False,
                                                       ConLike=False, WorkFree=False, Expandable=False,
                                                       Guidance=IF_ARGS [] 20 0}]
                                              y_su6g
                                                = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                    ((GHC.Types.[] @ GHC.Types.Char)
                                                     `cast` (Sym (Nth:2
                                                                      (((<GHC.Base.String>_R
                                                                         ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                             :: GHC.Types.Coercible
                                                                  GHC.Base.String GHC.Base.String)) } in
                                            case PlutusTx.Builtins.Internal.ifThenElse
                                                   @ GHC.Types.Bool
                                                   (PlutusTx.Builtins.Internal.equalsByteString
                                                      (tn
                                                       `cast` (Nth:2
                                                                   (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R <GHC.Types.Bool>_R)
                                                               :: GHC.Types.Coercible
                                                                    Plutus.V1.Ledger.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (y_su6g
                                                       `cast` (Nth:3
                                                                   (<GHC.Base.String>_R
                                                                    ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                      (Nth:3
                                                                                                                                                                                           (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R <GHC.Types.Bool>_R))
                                                               :: GHC.Types.Coercible
                                                                    Data.ByteString.Internal.ByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                   GHC.Types.True
                                                   GHC.Types.False
                                            of {
                                              GHC.Types.False -> GHC.Types.False;
                                              GHC.Types.True ->
                                                PlutusTx.Builtins.Internal.ifThenElse
                                                  @ GHC.Types.Bool
                                                  (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                  GHC.Types.True
                                                  GHC.Types.False
                                            };
                                          : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                        }
                                        }
                                    }
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @ GHC.Types.Bool
                                     (GHC.Magic.noinline
                                        @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                        PlutusTx.Builtins.Class.stringToBuiltinString
                                        (GHC.CString.unpackCString# "wrong amount minted"#))
                                     GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                           }
                           }
Context: Compiling expr: \ (ds_dqrR [Occ=Once!] :: ())
                           (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                           case ds_dqrR of { () ->
                           let {
                             info :: Plutus.V1.Ledger.Contexts.TxInfo
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             info
                               = case ctx of
                                 { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                           _ [Occ=Dead] ->
                                 ds1
                                 } } in
                           let {
                             $dMonoid3 [Occ=Once]
                               :: PlutusTx.Monoid.Monoid
                                    (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                      WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                             $dMonoid3
                               = PlutusTx.Numeric.$fMonoidSum
                                   @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                           case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                        @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                        @ Plutus.V1.Ledger.Contexts.TxInInfo
                                        $dMonoid3
                                        ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                            Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                              (case i of
                                               { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                               ds1
                                               })
                                              oref)
                                         `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0]
                                                               <GHC.Types.Bool>_R)
                                                 :: GHC.Types.Coercible
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo
                                                       -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                        (case info of
                                         { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead] ->
                                         ds1
                                         }))
                                     `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                             :: GHC.Types.Coercible
                                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                                  GHC.Types.Bool)
                                of {
                                  GHC.Types.False ->
                                    PlutusTx.Builtins.Internal.trace
                                      @ GHC.Types.Bool
                                      (GHC.Magic.noinline
                                         @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                         PlutusTx.Builtins.Class.stringToBuiltinString
                                         (GHC.CString.unpackCString# "UTxO not consumed"#))
                                      GHC.Types.False;
                                  GHC.Types.True -> GHC.Types.True
                                }
                           of {
                             GHC.Types.False -> GHC.Types.False;
                             GHC.Types.True ->
                               case case Plutus.V1.Ledger.Value.flattenValue
                                           (case info of
                                            { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] ds4 [Occ=Once]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead] ->
                                            ds4
                                            })
                                    of {
                                      [] -> GHC.Types.False;
                                      : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                        case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                        case ds_dqIR of {
                                          [] ->
                                            let {
                                              y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False,
                                                       ConLike=False, WorkFree=False, Expandable=False,
                                                       Guidance=IF_ARGS [] 20 0}]
                                              y_su6g
                                                = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                    ((GHC.Types.[] @ GHC.Types.Char)
                                                     `cast` (Sym (Nth:2
                                                                      (((<GHC.Base.String>_R
                                                                         ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                             :: GHC.Types.Coercible
                                                                  GHC.Base.String GHC.Base.String)) } in
                                            case PlutusTx.Builtins.Internal.ifThenElse
                                                   @ GHC.Types.Bool
                                                   (PlutusTx.Builtins.Internal.equalsByteString
                                                      (tn
                                                       `cast` (Nth:2
                                                                   (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R <GHC.Types.Bool>_R)
                                                               :: GHC.Types.Coercible
                                                                    Plutus.V1.Ledger.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (y_su6g
                                                       `cast` (Nth:3
                                                                   (<GHC.Base.String>_R
                                                                    ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                      (Nth:3
                                                                                                                                                                                           (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R <GHC.Types.Bool>_R))
                                                               :: GHC.Types.Coercible
                                                                    Data.ByteString.Internal.ByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                   GHC.Types.True
                                                   GHC.Types.False
                                            of {
                                              GHC.Types.False -> GHC.Types.False;
                                              GHC.Types.True ->
                                                PlutusTx.Builtins.Internal.ifThenElse
                                                  @ GHC.Types.Bool
                                                  (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                  GHC.Types.True
                                                  GHC.Types.False
                                            };
                                          : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                        }
                                        }
                                    }
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @ GHC.Types.Bool
                                     (GHC.Magic.noinline
                                        @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                        PlutusTx.Builtins.Class.stringToBuiltinString
                                        (GHC.CString.unpackCString# "wrong amount minted"#))
                                     GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                           }
                           }
Context: Compiling expr: \ (oref [Occ=OnceL]
                              :: Plutus.V1.Ledger.Tx.TxOutRef)
                           (ds_dqrR [Occ=Once!] :: ())
                           (ctx [Occ=Once!] :: Plutus.V1.Ledger.Contexts.ScriptContext) ->
                           case ds_dqrR of { () ->
                           let {
                             info :: Plutus.V1.Ledger.Contexts.TxInfo
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=False,
                                      WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
                             info
                               = case ctx of
                                 { Plutus.V1.Ledger.Contexts.ScriptContext ds1 [Occ=Once]
                                                                           _ [Occ=Dead] ->
                                 ds1
                                 } } in
                           let {
                             $dMonoid3 [Occ=Once]
                               :: PlutusTx.Monoid.Monoid
                                    (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                             [LclId,
                              Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False, ConLike=True,
                                      WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
                             $dMonoid3
                               = PlutusTx.Numeric.$fMonoidSum
                                   @ GHC.Types.Bool PlutusTx.Numeric.$fAdditiveMonoidBool } in
                           case case (PlutusTx.Foldable.$fFoldable[]_$cfoldMap
                                        @ (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                        @ Plutus.V1.Ledger.Contexts.TxInInfo
                                        $dMonoid3
                                        ((\ (i [Occ=Once!] :: Plutus.V1.Ledger.Contexts.TxInInfo) ->
                                            Plutus.V1.Ledger.Tx.$fEqTxOutRef_$c==
                                              (case i of
                                               { Plutus.V1.Ledger.Contexts.TxInInfo ds1 [Occ=Once]
                                                                                    _ [Occ=Dead] ->
                                               ds1
                                               })
                                              oref)
                                         `cast` (<Plutus.V1.Ledger.Contexts.TxInInfo>_R
                                                 ->_R Sym (Data.Semigroup.Internal.N:Sum[0]
                                                               <GHC.Types.Bool>_R)
                                                 :: GHC.Types.Coercible
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo -> GHC.Types.Bool)
                                                      (Plutus.V1.Ledger.Contexts.TxInInfo
                                                       -> Data.Semigroup.Internal.Sum GHC.Types.Bool)))
                                        (case info of
                                         { Plutus.V1.Ledger.Contexts.TxInfo ds1 [Occ=Once] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead]
                                                                            _ [Occ=Dead] _ [Occ=Dead] ->
                                         ds1
                                         }))
                                     `cast` (Data.Semigroup.Internal.N:Sum[0] <GHC.Types.Bool>_R
                                             :: GHC.Types.Coercible
                                                  (Data.Semigroup.Internal.Sum GHC.Types.Bool)
                                                  GHC.Types.Bool)
                                of {
                                  GHC.Types.False ->
                                    PlutusTx.Builtins.Internal.trace
                                      @ GHC.Types.Bool
                                      (GHC.Magic.noinline
                                         @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                         PlutusTx.Builtins.Class.stringToBuiltinString
                                         (GHC.CString.unpackCString# "UTxO not consumed"#))
                                      GHC.Types.False;
                                  GHC.Types.True -> GHC.Types.True
                                }
                           of {
                             GHC.Types.False -> GHC.Types.False;
                             GHC.Types.True ->
                               case case Plutus.V1.Ledger.Value.flattenValue
                                           (case info of
                                            { Plutus.V1.Ledger.Contexts.TxInfo _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] ds4 [Occ=Once]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead]
                                                                               _ [Occ=Dead] _ [Occ=Dead] ->
                                            ds4
                                            })
                                    of {
                                      [] -> GHC.Types.False;
                                      : ds_dqIQ [Occ=Once!] ds_dqIR [Occ=Once!] ->
                                        case ds_dqIQ of { (_ [Occ=Dead], tn [Occ=Once], amt [Occ=Once]) ->
                                        case ds_dqIR of {
                                          [] ->
                                            let {
                                              y_su6g [Occ=Once] :: Data.ByteString.Internal.ByteString
                                              [LclId,
                                               Unf=Unf{Src=<vanilla>, TopLvl=False, Value=False,
                                                       ConLike=False, WorkFree=False, Expandable=False,
                                                       Guidance=IF_ARGS [] 20 0}]
                                              y_su6g
                                                = Plutus.V1.Ledger.Value.$fIsStringTokenName1
                                                    ((GHC.Types.[] @ GHC.Types.Char)
                                                     `cast` (Sym (Nth:2
                                                                      (((<GHC.Base.String>_R
                                                                         ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Sym (Data.String.N:IsString[0]) <Plutus.V1.Ledger.Value.TokenName>_N) ; Data.String.N:IsString[0] <Plutus.V1.Ledger.Value.TokenName>_N))
                                                             :: GHC.Types.Coercible
                                                                  GHC.Base.String GHC.Base.String)) } in
                                            case PlutusTx.Builtins.Internal.ifThenElse
                                                   @ GHC.Types.Bool
                                                   (PlutusTx.Builtins.Internal.equalsByteString
                                                      (tn
                                                       `cast` (Nth:2
                                                                   (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                    ->_R <GHC.Types.Bool>_R)
                                                               :: GHC.Types.Coercible
                                                                    Plutus.V1.Ledger.Value.TokenName
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString))
                                                      (y_su6g
                                                       `cast` (Nth:3
                                                                   (<GHC.Base.String>_R
                                                                    ->_R Sym (PlutusTx.Builtins.Internal.N:BuiltinByteString[0]) ; Sym (Plutus.V1.Ledger.Value.N:TokenName[0])) ; Nth:2
                                                                                                                                                                                      (Nth:3
                                                                                                                                                                                           (Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R Plutus.V1.Ledger.Value.N:TokenName[0]
                                                                                                                                                                                            ->_R <GHC.Types.Bool>_R))
                                                               :: GHC.Types.Coercible
                                                                    Data.ByteString.Internal.ByteString
                                                                    PlutusTx.Builtins.Internal.BuiltinByteString)))
                                                   GHC.Types.True
                                                   GHC.Types.False
                                            of {
                                              GHC.Types.False -> GHC.Types.False;
                                              GHC.Types.True ->
                                                PlutusTx.Builtins.Internal.ifThenElse
                                                  @ GHC.Types.Bool
                                                  (PlutusTx.Builtins.Internal.equalsInteger amt 1)
                                                  GHC.Types.True
                                                  GHC.Types.False
                                            };
                                          : _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.False
                                        }
                                        }
                                    }
                               of {
                                 GHC.Types.False ->
                                   PlutusTx.Builtins.Internal.trace
                                     @ GHC.Types.Bool
                                     (GHC.Magic.noinline
                                        @ (GHC.Base.String -> PlutusTx.Builtins.Internal.BuiltinString)
                                        PlutusTx.Builtins.Class.stringToBuiltinString
                                        (GHC.CString.unpackCString# "wrong amount minted"#))
                                     GHC.Types.False;
                                 GHC.Types.True -> GHC.Types.True
                               }
                           }
                           }
Context: Compiling definition of: Week05.Homework2.mkPolicy
Context: Compiling expr: Week05.Homework2.mkPolicy
Context: Compiling expr: PlutusTx.Base..
                           @ (() -> Plutus.V1.Ledger.Contexts.ScriptContext -> GHC.Types.Bool)
                           @ Ledger.Typed.Scripts.MonetaryPolicies.WrappedMintingPolicyType
                           @ Plutus.V1.Ledger.Tx.TxOutRef
                           (Ledger.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
                              @ () PlutusTx.IsData.Instances.$fUnsafeFromData())
                           Week05.Homework2.mkPolicy
Context: Compiling expr at "plutus-pioneer-program-week05-0.1.0.0-inplace:Week05.Homework2:(52,6)-(52,67)"
